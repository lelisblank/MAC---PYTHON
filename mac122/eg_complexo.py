# -*- coding: utf-8 -*-
"""eg_complexo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bz-PZc5RunwE8Az4ITvMkbxceWxjWwJL
"""

'''

Para entregar o seu EG copie o seu arquivo EI 
para outro arquivo com o prefixo eg_. 

Não edite o cabeçalho dessa cópia, apenas 
faça as modificações que desejar no código para 
refletir as melhorias sugeridas pelas discussões 
em seu time.

Entregue seu arquivo com o prefixo "eg_" e  extensão ".py". 
Não esqueça de preencher também o formulário individual: 

Não serão aceitos EGs após encerrado o prazo de entrega.

'''

'''

    Nome: 11813456
    NUSP: Gustavo Bertozzi Motta

    Ao preencher esse cabeÃ§alho com o meu nome e o meu nÃºmero USP,
    declaro que todas as partes originais desse exercÃ­cio programa
    foram desenvolvidas e implementadas por mim ou por meu time 
    cujos nomes estÃ£o relacionados abaixo e que, portanto, nÃ£o 
    constituem desonestidade acadÃªmica ou plÃ¡gio.
    
    Entendo que EPs sem assinatura devem receber nota zero e, ainda
    assim, poderÃ£o ser punidos por desonestidade acadÃªmica.

    Declaro tambÃ©m que sou responsÃ¡vel por todas as cÃ³pias desse
    programa e que nÃ£o distribui ou facilitei a sua distribuiÃ§Ã£o.
    
    Estou ciente que os casos de plÃ¡gio e desonestidade acadÃªmica
    estarÃ£o sujeitos Ã s penalidades descritas na pÃ¡gina da disciplina
    na seÃ§Ã£o "Sobre colaboraÃ§Ã£o em MAC0122".

    ReconheÃ§o que utilizei as seguintes fontes externas ao conteÃºdo 
    utilizado e recomendado em MAC0122, ou recebi auxÃ­lio das pessoas
    listadas abaixo, e incluo tambÃ©m os nomes de colegas
    do meu time caso essa tenha sido uma atividade em grupo.

    - LISTA de colegas do time 
        - Camila Naomi Koshikumo
        - Leticia Maia - 11781715
        - Juan German Cornelio Palma

    - LISTA de fontes externas utilizadas (links ou referÃªncias como livros)
        - 

    - LISTA de outras pessoas que colaboraram na realizaÃ§Ã£o do trabalho e
        externas ao grupo.
        - 
'''


def main():
    '''
        Testes da classe Complexo. 
        Normalmente, a função main() é a primeira função
        a aparecer no arquivo. 
    '''
    
    cabecalho = '''Testes da classe Complexo
    
        Cada teste ou grupo de testes deve imprimir uma mensagem
        adequada para entender seu propósito, descrevendo a chamada 
        e a saída esperada.

        Exemplo: 
        Teste da criação usando valores default:
        c0 = Complexo( )
        print(f'Complexo( ) deve imprimir 0.0+j0.0. Resposta = {c0}')
        c1 = Complexo(2)
        print(f'Complexo(2) deve imprimir 2.0+j0.0. Resposta = {c1}')
    '''
    print(cabecalho)
    c0 = Complexo( )
    print(f'Complexo( ) deve imprimir 0.0       --       Resposta = {c0}')
    c1 = Complexo(2)
    print(f'Complexo(2) deve imprimir 2.0       --       Resposta = {c1}')
    # coloque a seguir os demais testes do seu grupo
    c2 = Complexo(8, 5)
    print(f'Complexo(8, 5) deve imprimir 8.0+j5.0   --   Resposta = {c2}')
    c3 = Complexo (1,-4)
    print(f'Complexo(1, -4) deve imprimir 1.0-j4.0  --   Resposta = {c3}')
    c4 = Complexo(-4, 1)
    print(f'Complexo(-4, 1) deve imprimir -4.0+j1.0   -- Resposta = {c4}')
    c5 = Complexo(-2, -3)
    print(f'Complexo(-2, -3) deve imprimir -2.0-j3.0  -- Resposta = {c5}')
    c6 = Complexo(0, -7.5)
    print(f'Complexo(0, -7) deve imprimir -j7.5    --    Resposta = {c6}')

# ===================================================================

class Complexo:
    '''Classe utilizada para representar um nÃºmero Complexo.

    Um complexo Ã© representado por dois nÃºmeros reais. 
    Assim, cada objeto dessa classe terÃ¡ dois atributos de estado:
 
       * `real`: um nÃºmero real que corresponde Ã  parte real
       * `imag`: um nÃºmero real que corresponde Ã  parte imaginÃ¡ria
 
    VocÃª deverÃ¡ escrever os mÃ©todos a seguir.
    '''

    #------------------------------------------------------------------------------
    def __init__(self, r = 0.0, i = 0.0):
        '''(Complexo, float, float) --> None

        Chamado pelo construtor da classe. 

        Recebe uma referÃªncia `self` ao objeto que estÃ¡ sendo
        construÃ­do/montado e os reais `r` e `i` que 
        representam o nÃºmero complexo.

        Exemplos:

        >>> c0 = Complexo() # construtor chama __init__()
        >>> c0.real
        0.0
        >>> c0.imag
        0.0
        >>> c1 = Complexo(9)
        >>> print(c1.real, c1.imag)
        9.0 0.0
        >>> c2 = Complexo(9,4)
        >>> print(c2.real, c2.imag)
        9.0 4.0
        >>> 
        '''
        self.real = float(r)
        self.imag = float(i)
        
    #------------------------------------------------------------------------------        
    def __str__(self):
        '''(Complexo) -> str

        Recebe uma referencia `self` a um objeto da classe Complexo e
        cria e retorna a string que representa o objeto.

        Utilizado por print() para exibir o objeto.
        FunÃ§Ã£o str() retorna a string criada pelo mÃ©todo __str__() da classe  

        Exemplos:

        >>> ini = Complexo(8)
        >>> fim = Complexo(9,4)
        >>> fim.__str__()
        '9.0+j4.0'
        >>> ini.__str__() # chamada do mÃ©todo __str__()
        '8.0'
        >>> str(ini) # funÃ§Ã£o str() exibe a string criada por __str__()
        '8.0'
        >>> str(fim) 
        '9.0+j4.0'
        >>> print(fim) # exibe o string criado por __str__()
        9.0+j4.0
        >>> print(ini)
        8.0
        >>>         
        '''
        if self.imag==0:
            return f'{self.real}'
        elif self.real==0 and self.imag>0:
            return f'j{self.imag}'
        elif self.real==0 and self.imag<0:
            return f'-j{abs(self.imag)}'
        elif self.imag<0:
            return f'{self.real}-j{abs(self.imag)}'
        return f'{self.real}+j{self.imag}'     

    #------------------------------------------------------------------------------        
    def some(self, other):
        '''(Complexo, Complexo) -> Complexo

        Recebe uma referencia `self` a um objeto da classe Complexo e
        outra referÃªncia `other`, para outro objeto Complexo, e cria e retorna
        um objeto Complexo resultado da soma self + other
        
        Exemplos:

        >>> c0 = Complexo(8)
        >>> c1 = Complexo(9,4)
        >>> c2 = c0.some(c1)
        >>> print(c2)
        17.0+j4.0
        >>>         
        '''
        novoreal = self.real + other.real
        novoimag = self.imag + other.imag
        return Complexo(novoreal,novoimag)

    #------------------------------------------------------------------------------        
    def __mul__(self, other):
        '''(Complexo, Complexo) -> Complexo

        Recebe uma referencia `self` a um objeto da classe Complexo e
        outra referÃªncia `other`, para outro objeto Complexo, e cria e retorna
        um objeto Complexo resultado do produto self * other
        
        Exemplos:

        >>> comp0 = Complexo(1, 2)
        >>> comp1 = Complexo(3, 4)
        >>> comp2 = comp0 * comp1
        >>> print(c2)
        -5.0+j10.0
        >>>         
        '''
        novoreal = self.real * other.real - self.imag*other.imag
        novoimag = self.real * other.imag + self.imag * other.real
        return Complexo(novoreal, novoimag)


# =========================================================
#   O teste if __name__ é SEMPRE a última coisa a fazer

if __name__ == '__main__':
    main()